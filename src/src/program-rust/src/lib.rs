use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
    msg,
    program_error::ProgramError,
    pubkey::Pubkey,
};

 
#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct UserAccount {
    pub amount_withdrawn: u32,
}

entrypoint!(process_instruction); 

 
pub fn process_instruction(
    program_id: &Pubkey,  
    accounts: &[AccountInfo],  
    _instruction_data: &[u8],  

) -> ProgramResult {

    let accounts_iter = &mut accounts.iter();

    let account = next_account_info(accounts_iter)?;

    if account.owner != program_id {
        msg!("Greeted account does not have the correct program id");
        return Err(ProgramError::IncorrectProgramId);
    }

    let fee: u8 = 10;
    let user_balance: u8 = 20;

    if _instruction_data[0] + fee > user_balance {
        return Err(ProgramError::InsufficientFunds);
    }

    let result: u32 = (user_balance - _instruction_data[0]).into();

    let mut user_account = UserAccount::try_from_slice(&account.data.borrow())?;
    user_account.amount_withdrawn = (_instruction_data[0]).into();
    user_account.serialize(&mut &mut account.data.borrow_mut()[..])?;

    Ok(())
}



